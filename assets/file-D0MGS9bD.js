function b(e){return Object.prototype.toString.call(e)==="[object Error]"}function s(e){return Object.prototype.toString.call(e)==="[object File]"}function d(e){return Object.prototype.toString.call(e)==="[object Blob]"}function h(e){return Object.prototype.toString.call(e)==="[object Object]"}function w(e){return Object.prototype.toString.call(e)==="[object HTMLImageElement]"}function l(e){return s(e)||d(e)}async function u(){let e;const o=await navigator.clipboard.read(),[t]=o||[];if(t&&t.types&&t.types.length){const n=t.types[t.types.length-1];e=await t.getType(n)}return e}function m(e){const{clipboardData:o}=e||window,{items:t}=o;let n=null;if(t&&t.length){for(let a=0;a<t.length;a++)if(t[a].type.indexOf("image")!==-1){n=t[a].getAsFile();break}}return n}function y(e){return new Promise(async o=>{let t;try{t=await m(e),l(t)||(t=await u())}catch{}t?f(t).then(n=>{o(n)}):o("")})}function f(e){return new Promise((o,t)=>{if(l(e)&&e.type.includes("image")){const a=new FileReader;a.readAsDataURL(e),a.onload=()=>{o(a.result)}}else t(new Error(`The selected file is not in image format, your file type=${e.type}`))})}function F(e){return new Promise(o=>{const t=new FileReader;t.onload=n=>{o(n.target.result)},t.readAsDataURL(e)})}function R(e,o){const t=URL.createObjectURL(e),n=document.createElement("a"),a=o||`file_${+new Date}`;n.href=t,n.setAttribute("download",a),n.innerHTML="downloading...",n.style.display="none",document.body.appendChild(n),setTimeout(()=>{n.click(),document.body.removeChild(n),URL.revokeObjectURL(t)},66)}function j(e,o){const t=e.split(","),n=(t[0].match(/:(.*?);/)||[])[1],a=atob(t[1]);let i=a.length;const r=new Uint8Array(i);for(;i;)i-=1,r[i]=a.charCodeAt(i);return new File([r],o,{type:n})}function L(e,o){const t=`data:text/plain;charset=utf-8,${encodeURIComponent(e)}`,n=document.createElement("a"),a=o||`s_${+new Date}.md`;n.href=t,n.download=a,n.textContent="downloading...",n.style.display="none",document.body.appendChild(n),setTimeout(()=>{n.click(),document.body.removeChild(n)},66)}function x(e){return new Promise((o,t)=>{fetch(e).then(n=>n.text()).then(n=>{o(n)}).catch(()=>{t()})})}function U(e){const o=new Image;return new Promise(t=>{o.src=e,o.onload=()=>{t({width:o.width,height:o.height})}})}function C(e){return`data:image/svg+xml,${encodeURIComponent(e)}`}const g=/fill="[^"]+"/gi;function T(e,o,t){const n=e;let a=0;return n.replace(g,function(r,p){let c=r;return a===o&&(c=`fill="${t}"`),a+=1,c})}export{w as a,R as b,b as c,j as d,g as e,x as f,L as g,U as h,h as i,y as j,F as r,C as s,T as u};
